#!/bin/env python3
# -*- coding: UTF-8 -*-

"""
    This file use to compute the offset of LCD Diple.
    You must offer the data file which contain all LMO doroids
    coordination and seperate every parts with blank line.

    Group 1     Monomer 1 with own basis
    Group 2     Monomer 2 with own basis
    Group 3     Monomer 1 with all basis
    Group 4     Monomer 2 with all basis
    Group 5     super molecular with all basis
    Group 6     Monomer 1 super molecular own basis
    Group 7     Monomer 2 super molecular own basis
    Group 8     MONOMER ELECTROSTATIC INTERACTION (OWN BASIS)
    Group 9     MONOMER ELECTROSTATIC INTERACTION (ALL BASIS)
    Group 10    MONOMER EXCHANGE-REPULSION INTERACTION (OWN BASIS)
    Group 11    MONOMER EXCHANGE-REPULSION INTERACTION (ALL BASIS)

"""

import re
import sys
import os
import math
from optparse import OptionParser

def OutputTable(coord, r):
    """
    OutputOffset    only output Table that contain
                    coordination and offset
    coord           the origin coordination
    r               the offset value
    """
    i = 0
    length = len(r)
    while i < length:
        coord[0][i] = [float(x) for x in coord[0][i][1:4]]
        coord[1][i] = [float(x) for x in coord[1][i][1:4]]
        #print(coordination[0][i][0])
        print( "%11.6f%11.6f%11.6f%11.6f%11.6f%11.6f%11.6f" \
            % (coord[0][i][0],coord[0][i][1], coord[0][i][2], \
               coord[1][i][0],coord[1][i][1], coord[1][i][2], \
               r[i]) )
        i += 1

def OutputOffset(offset):
    """
    OutputOffset    only output the offset
                    this function does not use
    """
    offsetData = ''
    for x in offset:
        offsetData += str(format(x, "11.6f"))
    return offsetData

def Distance(coord1, coord2):
    """
        Distance    compute the distance between point 1 which 
                    coordination is coord1 with point 2 which 
                    coordination is coord2. 
        coord1      the coordination of point 1
        coord2      the coordination of point 2
    """
    rr = []
    i = 1
    while i < 4:
        rr.append( float(coord1[i]) - float(coord2[i]))
        i += 1

    return math.sqrt( rr[0]*rr[0] + rr[1]*rr[1] + rr[2]*rr[2] )

def GetTwoBlock(blocks, i, j, flags=True):
    """
        GenerateTable   get the block that you need
        block           all the origin coordination
        i               the first you need
        j               the second you need
    """


    ilength = len(blocks[i])
    jlength = len(blocks[j])

    if ilength != jlength and flags:
        print("two block with different size")
        sys.exit(1)

    k = 0
    coord1 = []
    coord2 = []


    if flags:
        while k < ilength:
            coord1.append( blocks[i][k].strip().split() )
            coord2.append( blocks[j][k].strip().split() )
            k += 1
    else:
        while k < ilength:
            coord1.append( blocks[i][k].strip().split() )
            k += 1
        k = 0
        while k < jlength:
            coord2.append( blocks[j][k].strip().split() )
            k += 1
    #print(coord1)
    return (coord1, coord2)

def ComputeOffset(twoblock, i, j):
    """
        ComputeOffset   compute the distance between coordination 1 with coordination 2
        i               the first you need
        j               the second you need
    """
    coordData = GetTwoBlock( twoblock, i, j )
    r = []
    length = len(coordData[0])
    i = 0
    while i < length:
        r.append( Distance(coordData[0][i], coordData[1][i]) )
        i += 1
    return (coordData, r)

def PrintBlock(blocks):
    """

    """
    for block in blocks:
        for line in block:
            sys.stdout.write(line)
        sys.stdout.write('\n')

def SplitToBlock(lines, regular='^\s*$'):
    """
        SplitToBlock    split the data file to block which is easy to
                        process.
        lines           the data that is conpoud
    """
    reg = re.compile(regular)
    result = []
    block = []
    i = 0
    length = len(lines)

    while i < length:
        if reg.match(lines[i]) is None:
            block.append(lines[i])
            i += 1
        else:
            if block != []:
                result.append(block)
            while i < length and reg.match(lines[i]) :
                i += 1
            block = []

    return result

def GenrateReport(coord, output_type='-s'):
    """
        Generateown     output the origin coordination and the offset
        Data            the all origin coordination which may be
                        contain eleven group.
    """

    coord_r1 = ComputeOffset(coord, 0, 5)
    coord_r2 = ComputeOffset(coord, 1, 6)

    if output_type == '-s':
        print( "-" * 77 )
        OutputTable(coord_r1[0], coord_r1[1])
        print()
        OutputTable(coord_r2[0], coord_r2[1])
    else:
        print( OutputOffset( coord_r1[1] ) + OutputOffset( coord_r2[1] ) )

def parsecmd():
    """
        Parse the command option by a convenient method.
        and do the work gived by user.
    """
    usage = "Usage: %prog [options] filename"
    p = OptionParser(usage)
    p.add_option('-o', action='store', dest='ostyle',
                    help="control the offset output style. the style coulde \
                        be report or summary. [Default: %default]",
                    default='summary')
    p.add_option('-e', '--energy', action='store', dest='energy',
                    default='all', help="Control the output style of energy.\
                    you can choose own or all. In developing.")

    options, argv = p.parse_args()

    if not argv:
        print("Please Type in the file name which you want to deal with.")
        sys.exit(1)
    elif len(argv) > 1:
        print("the function in developing! Please wait a minute.")
        sys.exit(1)

    try:
        lines = open(argv[0], 'r' ).readlines()
    except IOError:
        print( "Open the file " + argv[0] + " error.\n \
                Please check the file exsit. ")
    blocks = SplitToBlock(lines)
    # output lcd coordination
    OutputCoordination(argv[0], blocks)

    if options.ostyle == 'report':
        GenrateReport( blocks, 'report' )
        sys.exit(0)
    elif options.ostyle == 'summary':
        GenrateReport( blocks )
        sys.exit(0)
    else:
        print("Error parameter! Please type in -h check.")
        sys.exit(1)

def OutputCoordination(fname, blocks):
    wfile = fname.replace('lcd', 'lcor')
    f = open(wfile, 'w')

    OutFile = fname.replace('lcd', 'out')
    cmd = "head -500 {0}".format(OutFile) + "|sed -n '/CHARGE         X                   Y                   Z/, /^$/{/#/d;p}' |sed '/^ \{2,\}/d;/^$/d'"
    oringinCoordination = os.popen(cmd).read()
    twoBlocks = GetTwoBlock(blocks, 5, 6, False)
    reg = re.compile(r'DU')
    for block in twoBlocks:
        for lines in block:
            f.write('\t'.join(lines).replace("DU",'HE    2.0' ) + "\n")
    f.write(oringinCoordination)
    f.close()

if __name__ == "__main__":
    parsecmd()
    #elif n == 3:
    #    f_name = sys.argv[2]

    #    try:
    #        lines = open( f_name , 'r' ).readlines()
    #    except IOError:
    #        print( "Open the file " + f_name + " error.\n \
    #                Please check the file exsit. ")

    #    blocks = SplitToBlock(lines)

    #    if para1 == '-s':
    #        GenrateReport( blocks )
    #        sys.exit(0)
    #    elif para1 == '-c':
    #        GenrateReport( blocks, para1 )
    #        sys.exit(0)
    #    else:
    #        print("Error parameter! Please type in -h check.")
    #        sys.exit(1)
    #else:
    #    print( "The features is under develop." )
