#!/bin/env python3

"""This script used to get LMOEDA energy E(polarization)

Now: Thu Apr 12 11:37:00 CST 2012
    analysis E(pol)
    output E(pol) come from PCM directly
------------------------------------------------------------------------------
r:  repulsion, p:   polarization
--------------------------------
    ΔT = Tr - Tp
    ΔV = Vr - Vp
    ΔX = Xr - Xp
    ΔJ = Jr - Jp
    ΔN = Nr - Np = 0
    ΔE1 = Er - Ep = ΔE(pol)
    ΔE2 = Er - Ep (dft)
--------------------------------------
    ΔE(gas) = ΔT + ΔV + ΔX + ΔJ + ΔN
    MP2:
        ΔE(pcm) = ΔE1 - ΔE(gas)
    DFT:
        ΔE(pcm) = ΔE2 - ΔE1 - ΔE(gas)
------------------------------------------------------------------------------

TODO:
    analysis every orbital E(pol)

"""

import sys
import os
from optparse import OptionParser

def ParseOption():
    """
    """
    usage = "Usage: %prog [options] filename"
    p = OptionParser(usage)
    p.add_option('-m', '--method', action='store', dest='method',
                    help="""Setup the quantum chemistry method you \
            used to EDA. [Default: %default]""", default='mp2')
    p.add_option('-v', '--verbose', action='store_true', dest='verbose',
                    help="""verbosely list data. [Default: %default]""",
                    default=False)
    options, argv = p.parse_args()

    if not argv:
        print("Please type in the file you want to analysis!")
        sys.exit(1)

    if options.method == 'mp2':
        options.method = MP2
    elif options.method == 'dft':
        options.method = DFT
    else:
        print("The method you choose is wrong")
        sys.exit(1)

    return (options, argv[0])

def main(FileName, iMethod):
    """此函数用来计算EDA-PCM中由于PCM效应而使得E(pol)的变化值。
        FileName        为使用EDA-PCM方法计算而等到的输出文件
        iMethod         用于说明计算EDA-PCM时所使用的post-HF方法。
                        目前计算测试使用过MP2, DFT。两种方法的
                        输出略有不同，所以需要说明。
    """

    # 此Shell命令非常重要，用于提取输出文件对应部分，如果程序出现问题，应试
    # 首先确认此处Shell取得了文件中对应的部分
    # 测试文件位于test目录下。
    cmd = "tail -1000 %s | sed -n '/(REPULSION ENERGY: T V X J CHANGE)/, \
            /SUMMARY OF INTERACTION ENERGIES/{p;}' \
        |sed '/\(^$\)\|\(^ (\)\|\(^ -\)\|\(^ S\)\|\(^  \)/d;'" % FileName

    items = []
    row = []

    dpolarization = os.popen(cmd).readlines()
    if not dpolarization:
        sys.exit(1)

    for line in dpolarization:
        tvzjn = line.split()
        items.append(tvzjn[1:3])
    for i in range(iMethod):
        diff = (float(items[i + iMethod][1]) - float(items[i][1])) * hartree
        row.append(diff)

    return row

def output(row, method, verbose=False):
    """此函数用于计算,输出结果
    """
    if method == MP2:
        PolGas = sum(row[:5])
        PolPCM = format(row[5] - PolGas, precision)
    elif method == DFT:
        PolGas = sum(row[:5])
        PolPCM = format(row[6] - row[5] - PolGas, precision)

    if verbose:
        for i in range(5):
            tmp = format(row[i], precision).rjust(charWidth)
            print(tmp, end="")
    PolGas = format(PolGas, precision)
    print(PolGas.rjust(charWidth), PolPCM.rjust(charWidth))

if __name__ == "__main__":

    # 这三个变量是来操作数值精度和设定单位变换值的(hartree)
    global hartree
    global precision
    global charWidth
    global DFT, MP2     # 用以区分MP2/DFT方法

    hartree = 627.510
    precision = ".2f"
    charWidth = 15
    DFT = 7
    MP2 = 6

    # 解析命令行参数
    options, filename = ParseOption()
    # 读取文件数据
    data = main(filename, options.method)
    # 处理, 输出
    output(data, options.method, options.verbose)
